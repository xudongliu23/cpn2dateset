// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "cpnet_instance.hxx"

// pref_var_t
// 

const pref_var_t::VARIABLE_NAME_type& pref_var_t::
VARIABLE_NAME () const
{
  return this->VARIABLE_NAME_.get ();
}

pref_var_t::VARIABLE_NAME_type& pref_var_t::
VARIABLE_NAME ()
{
  return this->VARIABLE_NAME_.get ();
}

void pref_var_t::
VARIABLE_NAME (const VARIABLE_NAME_type& x)
{
  this->VARIABLE_NAME_.set (x);
}

void pref_var_t::
VARIABLE_NAME (::std::auto_ptr< VARIABLE_NAME_type > x)
{
  this->VARIABLE_NAME_.set (x);
}

const pref_var_t::DOMAIN_VALUE_sequence& pref_var_t::
DOMAIN_VALUE () const
{
  return this->DOMAIN_VALUE_;
}

pref_var_t::DOMAIN_VALUE_sequence& pref_var_t::
DOMAIN_VALUE ()
{
  return this->DOMAIN_VALUE_;
}

void pref_var_t::
DOMAIN_VALUE (const DOMAIN_VALUE_sequence& s)
{
  this->DOMAIN_VALUE_ = s;
}


// pref_st_t
// 

const pref_st_t::STATEMENT_ID_type& pref_st_t::
STATEMENT_ID () const
{
  return this->STATEMENT_ID_.get ();
}

pref_st_t::STATEMENT_ID_type& pref_st_t::
STATEMENT_ID ()
{
  return this->STATEMENT_ID_.get ();
}

void pref_st_t::
STATEMENT_ID (const STATEMENT_ID_type& x)
{
  this->STATEMENT_ID_.set (x);
}

void pref_st_t::
STATEMENT_ID (::std::auto_ptr< STATEMENT_ID_type > x)
{
  this->STATEMENT_ID_.set (x);
}

const pref_st_t::PREFERENCE_VARIABLE_type& pref_st_t::
PREFERENCE_VARIABLE () const
{
  return this->PREFERENCE_VARIABLE_.get ();
}

pref_st_t::PREFERENCE_VARIABLE_type& pref_st_t::
PREFERENCE_VARIABLE ()
{
  return this->PREFERENCE_VARIABLE_.get ();
}

void pref_st_t::
PREFERENCE_VARIABLE (const PREFERENCE_VARIABLE_type& x)
{
  this->PREFERENCE_VARIABLE_.set (x);
}

void pref_st_t::
PREFERENCE_VARIABLE (::std::auto_ptr< PREFERENCE_VARIABLE_type > x)
{
  this->PREFERENCE_VARIABLE_.set (x);
}

const pref_st_t::CONDITION_sequence& pref_st_t::
CONDITION () const
{
  return this->CONDITION_;
}

pref_st_t::CONDITION_sequence& pref_st_t::
CONDITION ()
{
  return this->CONDITION_;
}

void pref_st_t::
CONDITION (const CONDITION_sequence& s)
{
  this->CONDITION_ = s;
}

const pref_st_t::PREFERENCE_sequence& pref_st_t::
PREFERENCE () const
{
  return this->PREFERENCE_;
}

pref_st_t::PREFERENCE_sequence& pref_st_t::
PREFERENCE ()
{
  return this->PREFERENCE_;
}

void pref_st_t::
PREFERENCE (const PREFERENCE_sequence& s)
{
  this->PREFERENCE_ = s;
}


// cpn_t
// 

const cpn_t::PREFERENCE_VARIABLE_sequence& cpn_t::
PREFERENCE_VARIABLE () const
{
  return this->PREFERENCE_VARIABLE_;
}

cpn_t::PREFERENCE_VARIABLE_sequence& cpn_t::
PREFERENCE_VARIABLE ()
{
  return this->PREFERENCE_VARIABLE_;
}

void cpn_t::
PREFERENCE_VARIABLE (const PREFERENCE_VARIABLE_sequence& s)
{
  this->PREFERENCE_VARIABLE_ = s;
}

const cpn_t::PREFERENCE_STATEMENT_sequence& cpn_t::
PREFERENCE_STATEMENT () const
{
  return this->PREFERENCE_STATEMENT_;
}

cpn_t::PREFERENCE_STATEMENT_sequence& cpn_t::
PREFERENCE_STATEMENT ()
{
  return this->PREFERENCE_STATEMENT_;
}

void cpn_t::
PREFERENCE_STATEMENT (const PREFERENCE_STATEMENT_sequence& s)
{
  this->PREFERENCE_STATEMENT_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// pref_var_t
//

pref_var_t::
pref_var_t (const VARIABLE_NAME_type& VARIABLE_NAME)
: ::xml_schema::type (),
  VARIABLE_NAME_ (VARIABLE_NAME, this),
  DOMAIN_VALUE_ (this)
{
}

pref_var_t::
pref_var_t (const pref_var_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  VARIABLE_NAME_ (x.VARIABLE_NAME_, f, this),
  DOMAIN_VALUE_ (x.DOMAIN_VALUE_, f, this)
{
}

pref_var_t::
pref_var_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  VARIABLE_NAME_ (this),
  DOMAIN_VALUE_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void pref_var_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // VARIABLE-NAME
    //
    if (n.name () == "VARIABLE-NAME" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< VARIABLE_NAME_type > r (
        VARIABLE_NAME_traits::create (i, f, this));

      if (!VARIABLE_NAME_.present ())
      {
        this->VARIABLE_NAME_.set (r);
        continue;
      }
    }

    // DOMAIN-VALUE
    //
    if (n.name () == "DOMAIN-VALUE" && n.namespace_ ().empty ())
    {
      this->DOMAIN_VALUE_.push_back (DOMAIN_VALUE_traits::create (i, f, this));
      continue;
    }

    break;
  }

  if (!VARIABLE_NAME_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "VARIABLE-NAME",
      "");
  }
}

pref_var_t* pref_var_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class pref_var_t (*this, f, c);
}

pref_var_t& pref_var_t::
operator= (const pref_var_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->VARIABLE_NAME_ = x.VARIABLE_NAME_;
    this->DOMAIN_VALUE_ = x.DOMAIN_VALUE_;
  }

  return *this;
}

pref_var_t::
~pref_var_t ()
{
}

// pref_st_t
//

pref_st_t::
pref_st_t (const STATEMENT_ID_type& STATEMENT_ID,
           const PREFERENCE_VARIABLE_type& PREFERENCE_VARIABLE)
: ::xml_schema::type (),
  STATEMENT_ID_ (STATEMENT_ID, this),
  PREFERENCE_VARIABLE_ (PREFERENCE_VARIABLE, this),
  CONDITION_ (this),
  PREFERENCE_ (this)
{
}

pref_st_t::
pref_st_t (const pref_st_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  STATEMENT_ID_ (x.STATEMENT_ID_, f, this),
  PREFERENCE_VARIABLE_ (x.PREFERENCE_VARIABLE_, f, this),
  CONDITION_ (x.CONDITION_, f, this),
  PREFERENCE_ (x.PREFERENCE_, f, this)
{
}

pref_st_t::
pref_st_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  STATEMENT_ID_ (this),
  PREFERENCE_VARIABLE_ (this),
  CONDITION_ (this),
  PREFERENCE_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void pref_st_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // STATEMENT-ID
    //
    if (n.name () == "STATEMENT-ID" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< STATEMENT_ID_type > r (
        STATEMENT_ID_traits::create (i, f, this));

      if (!STATEMENT_ID_.present ())
      {
        this->STATEMENT_ID_.set (r);
        continue;
      }
    }

    // PREFERENCE-VARIABLE
    //
    if (n.name () == "PREFERENCE-VARIABLE" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PREFERENCE_VARIABLE_type > r (
        PREFERENCE_VARIABLE_traits::create (i, f, this));

      if (!PREFERENCE_VARIABLE_.present ())
      {
        this->PREFERENCE_VARIABLE_.set (r);
        continue;
      }
    }

    // CONDITION
    //
    if (n.name () == "CONDITION" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< CONDITION_type > r (
        CONDITION_traits::create (i, f, this));

      this->CONDITION_.push_back (r);
      continue;
    }

    // PREFERENCE
    //
    if (n.name () == "PREFERENCE" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PREFERENCE_type > r (
        PREFERENCE_traits::create (i, f, this));

      this->PREFERENCE_.push_back (r);
      continue;
    }

    break;
  }

  if (!STATEMENT_ID_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "STATEMENT-ID",
      "");
  }

  if (!PREFERENCE_VARIABLE_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "PREFERENCE-VARIABLE",
      "");
  }
}

pref_st_t* pref_st_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class pref_st_t (*this, f, c);
}

pref_st_t& pref_st_t::
operator= (const pref_st_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->STATEMENT_ID_ = x.STATEMENT_ID_;
    this->PREFERENCE_VARIABLE_ = x.PREFERENCE_VARIABLE_;
    this->CONDITION_ = x.CONDITION_;
    this->PREFERENCE_ = x.PREFERENCE_;
  }

  return *this;
}

pref_st_t::
~pref_st_t ()
{
}

// cpn_t
//

cpn_t::
cpn_t ()
: ::xml_schema::type (),
  PREFERENCE_VARIABLE_ (this),
  PREFERENCE_STATEMENT_ (this)
{
}

cpn_t::
cpn_t (const cpn_t& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  PREFERENCE_VARIABLE_ (x.PREFERENCE_VARIABLE_, f, this),
  PREFERENCE_STATEMENT_ (x.PREFERENCE_STATEMENT_, f, this)
{
}

cpn_t::
cpn_t (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  PREFERENCE_VARIABLE_ (this),
  PREFERENCE_STATEMENT_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cpn_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // PREFERENCE-VARIABLE
    //
    if (n.name () == "PREFERENCE-VARIABLE" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PREFERENCE_VARIABLE_type > r (
        PREFERENCE_VARIABLE_traits::create (i, f, this));

      this->PREFERENCE_VARIABLE_.push_back (r);
      continue;
    }

    // PREFERENCE-STATEMENT
    //
    if (n.name () == "PREFERENCE-STATEMENT" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PREFERENCE_STATEMENT_type > r (
        PREFERENCE_STATEMENT_traits::create (i, f, this));

      this->PREFERENCE_STATEMENT_.push_back (r);
      continue;
    }

    break;
  }
}

cpn_t* cpn_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cpn_t (*this, f, c);
}

cpn_t& cpn_t::
operator= (const cpn_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->PREFERENCE_VARIABLE_ = x.PREFERENCE_VARIABLE_;
    this->PREFERENCE_STATEMENT_ = x.PREFERENCE_STATEMENT_;
  }

  return *this;
}

cpn_t::
~cpn_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::cpn_t > (
    ::PREFERENCE_SPECIFICATION (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::cpn_t > (
    ::PREFERENCE_SPECIFICATION (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::cpn_t > (
    ::PREFERENCE_SPECIFICATION (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::PREFERENCE_SPECIFICATION (isrc, f, p);
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::PREFERENCE_SPECIFICATION (isrc, h, f, p);
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::PREFERENCE_SPECIFICATION (isrc, h, f, p);
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::PREFERENCE_SPECIFICATION (isrc, f, p);
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::PREFERENCE_SPECIFICATION (isrc, h, f, p);
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::PREFERENCE_SPECIFICATION (isrc, h, f, p);
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::cpn_t > (
    ::PREFERENCE_SPECIFICATION (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::cpn_t > (
    ::PREFERENCE_SPECIFICATION (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::cpn_t > (
    ::PREFERENCE_SPECIFICATION (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::cpn_t > (
      ::PREFERENCE_SPECIFICATION (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "PREFERENCE-SPECIFICATION" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::cpn_t > r (
      ::xsd::cxx::tree::traits< ::cpn_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "PREFERENCE-SPECIFICATION",
    "");
}

::std::auto_ptr< ::cpn_t >
PREFERENCE_SPECIFICATION (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "PREFERENCE-SPECIFICATION" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::cpn_t > r (
      ::xsd::cxx::tree::traits< ::cpn_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "PREFERENCE-SPECIFICATION",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

